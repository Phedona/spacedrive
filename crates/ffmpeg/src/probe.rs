use crate::{error::Error, format_ctx::FFmpegFormatContext, model::MediaInfo, utils::from_path};

use ffmpeg_sys_next::{av_log_set_level, AV_LOG_FATAL};

use std::path::Path;

pub fn probe(filename: impl AsRef<Path>) -> Result<MediaInfo, Error> {
	let filename = filename.as_ref();

	// Reduce the amount of logs generated by FFmpeg
	unsafe { av_log_set_level(AV_LOG_FATAL) };

	// Dictionary to store format options
	// let mut format_opts = FFmpegDict::new(None);
	// Some MPEGTS specific option (copied from ffprobe)
	// let scan_all_pmts = c"scan_all_pmts";
	// format_opts.set(scan_all_pmts, c"1")?;

	// Open an input stream, read the header and allocate the format context
	let mut fmt_ctx = FFmpegFormatContext::open_file(from_path(filename)?.as_c_str())?;

	// // Reset MPEGTS specific option
	// format_opts.remove(scan_all_pmts)?;

	// Read packets of media file to get stream information.
	fmt_ctx.find_stream_info()?;

	Ok((&fmt_ctx).into())
}
